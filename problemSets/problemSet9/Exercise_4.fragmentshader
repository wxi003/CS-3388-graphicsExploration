#version 400

// Interpolated values from the vertex shaders
in vec3 fragNormal; // Normal
in vec3 fragEyeDir; // Eye direction (camera direction)
in vec3 fragLightDir; // Light direction

// Ouput data
out vec4 FragColor;

uniform vec3 lightColor; // Light color
uniform vec3 materialAmbient; // Material ambient color
uniform vec3 materialDiffuse; // Material diffuse color
uniform vec3 materialSpecular; // Material specular color

void main()
{
    vec3 normal = normalize(fragNormal);
    vec3 eyeDir = normalize(fragEyeDir);
    vec3 lightDir = normalize(fragLightDir);

    // Ambient component
    vec3 ambient = materialAmbient * lightColor;

    // Diffuse component
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diff * materialDiffuse * lightColor;

    // Specular component
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(eyeDir, reflectDir), 0.0), 32.0);
    vec3 specular = spec * materialSpecular * lightColor;

    // Combine all components
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}
