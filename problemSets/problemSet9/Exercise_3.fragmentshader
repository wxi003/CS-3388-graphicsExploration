#version 400

// Interpolated values from the vertex shaders
in vec3 fragPosition;
in vec3 fragNormal;

// Ouput data
out vec4 FragColor;

uniform vec3 lightDirection1;
uniform vec3 lightDirection2;
uniform vec3 lightColor1;
uniform vec3 lightColor2;
uniform vec3 objectColor;
uniform vec3 viewPosition;

void main(){

    // Ambient component
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * (lightColor1 + lightColor2);

    // Diffuse component
    vec3 norm = normalize(fragNormal);
    float diff1 = max(dot(norm, -lightDirection1), 0.0);
    float diff2 = max(dot(norm, -lightDirection2), 0.0);
    vec3 diffuse = (diff1 * lightColor1 + diff2 * lightColor2) * objectColor;

    // Specular component
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPosition - fragPosition);
    vec3 reflectDir1 = reflect(lightDirection1, norm);
    vec3 reflectDir2 = reflect(lightDirection2, norm);
    float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), 32);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), 32);
    vec3 specular = specularStrength * (spec1 * lightColor1 + spec2 * lightColor2);

    // Combine all components
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);

}
